// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddTag extends ethereum.Event {
  get params(): AddTag__Params {
    return new AddTag__Params(this);
  }
}

export class AddTag__Params {
  _event: AddTag;

  constructor(event: AddTag) {
    this._event = event;
  }

  get tags(): Array<string> {
    return this._event.parameters[0].value.toStringArray();
  }

  get cid(): string {
    return this._event.parameters[1].value.toString();
  }

  get provider(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ClearTag extends ethereum.Event {
  get params(): ClearTag__Params {
    return new ClearTag__Params(this);
  }
}

export class ClearTag__Params {
  _event: ClearTag;

  constructor(event: ClearTag) {
    this._event = event;
  }

  get tags(): Array<string> {
    return this._event.parameters[0].value.toStringArray();
  }
  
  get cid(): string {
    return this._event.parameters[0].value.toString();
  }

  get provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreateTag extends ethereum.Event {
  get params(): CreateTag__Params {
    return new CreateTag__Params(this);
  }
}

export class CreateTag__Params {
  _event: CreateTag;

  constructor(event: CreateTag) {
    this._event = event;
  }

  get tags(): Array<string> {
    return this._event.parameters[0].value.toStringArray();
  }

  get cid(): string {
    return this._event.parameters[1].value.toString();
  }

  get provider(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RemoveTag extends ethereum.Event {
  get params(): RemoveTag__Params {
    return new RemoveTag__Params(this);
  }
}

export class RemoveTag__Params {
  _event: RemoveTag;

  constructor(event: RemoveTag) {
    this._event = event;
  }

  get tags(): Array<string> {
    return this._event.parameters[0].value.toStringArray();
  }

  get cid(): string {
    return this._event.parameters[1].value.toString();
  }

  get provider(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Tag extends ethereum.SmartContract {
  static bind(address: Address): Tag {
    return new Tag("Tag", address);
  }

  cidArray(param0: BigInt): string {
    let result = super.call("cidArray", "cidArray(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_cidArray(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("cidArray", "cidArray(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  cidMapping(param0: string): BigInt {
    let result = super.call("cidMapping", "cidMapping(string):(uint256)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toBigInt();
  }

  try_cidMapping(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cidMapping", "cidMapping(string):(uint256)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cidTagExistenceMapping(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): BigInt {
    let result = super.call(
      "cidTagExistenceMapping",
      "cidTagExistenceMapping(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_cidTagExistenceMapping(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cidTagExistenceMapping",
      "cidTagExistenceMapping(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cidTagMapping(param0: Address, param1: BigInt, param2: BigInt): BigInt {
    let result = super.call(
      "cidTagMapping",
      "cidTagMapping(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_cidTagMapping(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cidTagMapping",
      "cidTagMapping(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCIDswithTags(
    tag: string,
    fromProvider: Address,
    skip: BigInt,
    limit: BigInt
  ): Array<string> {
    let result = super.call(
      "getCIDswithTags",
      "getCIDswithTags(string,address,uint256,uint256):(string[])",
      [
        ethereum.Value.fromString(tag),
        ethereum.Value.fromAddress(fromProvider),
        ethereum.Value.fromUnsignedBigInt(skip),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );

    return result[0].toStringArray();
  }

  try_getCIDswithTags(
    tag: string,
    fromProvider: Address,
    skip: BigInt,
    limit: BigInt
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getCIDswithTags",
      "getCIDswithTags(string,address,uint256,uint256):(string[])",
      [
        ethereum.Value.fromString(tag),
        ethereum.Value.fromAddress(fromProvider),
        ethereum.Value.fromUnsignedBigInt(skip),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getTagsWithCID(
    cid: string,
    fromProvider: Address,
    skip: BigInt,
    limit: BigInt
  ): Array<string> {
    let result = super.call(
      "getTagsWithCID",
      "getTagsWithCID(string,address,uint256,uint256):(string[])",
      [
        ethereum.Value.fromString(cid),
        ethereum.Value.fromAddress(fromProvider),
        ethereum.Value.fromUnsignedBigInt(skip),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );

    return result[0].toStringArray();
  }

  try_getTagsWithCID(
    cid: string,
    fromProvider: Address,
    skip: BigInt,
    limit: BigInt
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getTagsWithCID",
      "getTagsWithCID(string,address,uint256,uint256):(string[])",
      [
        ethereum.Value.fromString(cid),
        ethereum.Value.fromAddress(fromProvider),
        ethereum.Value.fromUnsignedBigInt(skip),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  providers(param0: BigInt): Address {
    let result = super.call("providers", "providers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_providers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("providers", "providers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tagArray(param0: BigInt): string {
    let result = super.call("tagArray", "tagArray(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_tagArray(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tagArray", "tagArray(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tagCidExistenceMapping(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): BigInt {
    let result = super.call(
      "tagCidExistenceMapping",
      "tagCidExistenceMapping(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_tagCidExistenceMapping(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tagCidExistenceMapping",
      "tagCidExistenceMapping(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tagCidMapping(param0: Address, param1: BigInt, param2: BigInt): BigInt {
    let result = super.call(
      "tagCidMapping",
      "tagCidMapping(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_tagCidMapping(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tagCidMapping",
      "tagCidMapping(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tagMapping(param0: string): BigInt {
    let result = super.call("tagMapping", "tagMapping(string):(uint256)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tagMapping(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tagMapping", "tagMapping(string):(uint256)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trustedForwarder(): Address {
    let result = super.call(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AddTagsWithSigCall extends ethereum.Call {
  get inputs(): AddTagsWithSigCall__Inputs {
    return new AddTagsWithSigCall__Inputs(this);
  }

  get outputs(): AddTagsWithSigCall__Outputs {
    return new AddTagsWithSigCall__Outputs(this);
  }
}

export class AddTagsWithSigCall__Inputs {
  _call: AddTagsWithSigCall;

  constructor(call: AddTagsWithSigCall) {
    this._call = call;
  }

  get tags(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get cid(): string {
    return this._call.inputValues[1].value.toString();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AddTagsWithSigCall__Outputs {
  _call: AddTagsWithSigCall;

  constructor(call: AddTagsWithSigCall) {
    this._call = call;
  }
}

export class AddTagsWithoutSigCall extends ethereum.Call {
  get inputs(): AddTagsWithoutSigCall__Inputs {
    return new AddTagsWithoutSigCall__Inputs(this);
  }

  get outputs(): AddTagsWithoutSigCall__Outputs {
    return new AddTagsWithoutSigCall__Outputs(this);
  }
}

export class AddTagsWithoutSigCall__Inputs {
  _call: AddTagsWithoutSigCall;

  constructor(call: AddTagsWithoutSigCall) {
    this._call = call;
  }

  get tags(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get cid(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AddTagsWithoutSigCall__Outputs {
  _call: AddTagsWithoutSigCall;

  constructor(call: AddTagsWithoutSigCall) {
    this._call = call;
  }
}

export class ClearTagsWithSigCall extends ethereum.Call {
  get inputs(): ClearTagsWithSigCall__Inputs {
    return new ClearTagsWithSigCall__Inputs(this);
  }

  get outputs(): ClearTagsWithSigCall__Outputs {
    return new ClearTagsWithSigCall__Outputs(this);
  }
}

export class ClearTagsWithSigCall__Inputs {
  _call: ClearTagsWithSigCall;

  constructor(call: ClearTagsWithSigCall) {
    this._call = call;
  }

  get cid(): string {
    return this._call.inputValues[0].value.toString();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ClearTagsWithSigCall__Outputs {
  _call: ClearTagsWithSigCall;

  constructor(call: ClearTagsWithSigCall) {
    this._call = call;
  }
}

export class ClearTagsWithoutSigCall extends ethereum.Call {
  get inputs(): ClearTagsWithoutSigCall__Inputs {
    return new ClearTagsWithoutSigCall__Inputs(this);
  }

  get outputs(): ClearTagsWithoutSigCall__Outputs {
    return new ClearTagsWithoutSigCall__Outputs(this);
  }
}

export class ClearTagsWithoutSigCall__Inputs {
  _call: ClearTagsWithoutSigCall;

  constructor(call: ClearTagsWithoutSigCall) {
    this._call = call;
  }

  get cid(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ClearTagsWithoutSigCall__Outputs {
  _call: ClearTagsWithoutSigCall;

  constructor(call: ClearTagsWithoutSigCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get forwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveTagsWithSigCall extends ethereum.Call {
  get inputs(): RemoveTagsWithSigCall__Inputs {
    return new RemoveTagsWithSigCall__Inputs(this);
  }

  get outputs(): RemoveTagsWithSigCall__Outputs {
    return new RemoveTagsWithSigCall__Outputs(this);
  }
}

export class RemoveTagsWithSigCall__Inputs {
  _call: RemoveTagsWithSigCall;

  constructor(call: RemoveTagsWithSigCall) {
    this._call = call;
  }

  get tags(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get cid(): string {
    return this._call.inputValues[1].value.toString();
  }

  get skipUnmatch(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class RemoveTagsWithSigCall__Outputs {
  _call: RemoveTagsWithSigCall;

  constructor(call: RemoveTagsWithSigCall) {
    this._call = call;
  }
}

export class RemoveTagsWithoutSigCall extends ethereum.Call {
  get inputs(): RemoveTagsWithoutSigCall__Inputs {
    return new RemoveTagsWithoutSigCall__Inputs(this);
  }

  get outputs(): RemoveTagsWithoutSigCall__Outputs {
    return new RemoveTagsWithoutSigCall__Outputs(this);
  }
}

export class RemoveTagsWithoutSigCall__Inputs {
  _call: RemoveTagsWithoutSigCall;

  constructor(call: RemoveTagsWithoutSigCall) {
    this._call = call;
  }

  get tags(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get cid(): string {
    return this._call.inputValues[1].value.toString();
  }

  get skipUnmatch(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class RemoveTagsWithoutSigCall__Outputs {
  _call: RemoveTagsWithoutSigCall;

  constructor(call: RemoveTagsWithoutSigCall) {
    this._call = call;
  }
}

export class SetTagProviderCall extends ethereum.Call {
  get inputs(): SetTagProviderCall__Inputs {
    return new SetTagProviderCall__Inputs(this);
  }

  get outputs(): SetTagProviderCall__Outputs {
    return new SetTagProviderCall__Outputs(this);
  }
}

export class SetTagProviderCall__Inputs {
  _call: SetTagProviderCall;

  constructor(call: SetTagProviderCall) {
    this._call = call;
  }
}

export class SetTagProviderCall__Outputs {
  _call: SetTagProviderCall;

  constructor(call: SetTagProviderCall) {
    this._call = call;
  }
}

export class SetTagsWithSigCall extends ethereum.Call {
  get inputs(): SetTagsWithSigCall__Inputs {
    return new SetTagsWithSigCall__Inputs(this);
  }

  get outputs(): SetTagsWithSigCall__Outputs {
    return new SetTagsWithSigCall__Outputs(this);
  }
}

export class SetTagsWithSigCall__Inputs {
  _call: SetTagsWithSigCall;

  constructor(call: SetTagsWithSigCall) {
    this._call = call;
  }

  get tags(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get cid(): string {
    return this._call.inputValues[1].value.toString();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SetTagsWithSigCall__Outputs {
  _call: SetTagsWithSigCall;

  constructor(call: SetTagsWithSigCall) {
    this._call = call;
  }
}

export class SetTagsWithoutSigCall extends ethereum.Call {
  get inputs(): SetTagsWithoutSigCall__Inputs {
    return new SetTagsWithoutSigCall__Inputs(this);
  }

  get outputs(): SetTagsWithoutSigCall__Outputs {
    return new SetTagsWithoutSigCall__Outputs(this);
  }
}

export class SetTagsWithoutSigCall__Inputs {
  _call: SetTagsWithoutSigCall;

  constructor(call: SetTagsWithoutSigCall) {
    this._call = call;
  }

  get tags(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get cid(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTagsWithoutSigCall__Outputs {
  _call: SetTagsWithoutSigCall;

  constructor(call: SetTagsWithoutSigCall) {
    this._call = call;
  }
}
