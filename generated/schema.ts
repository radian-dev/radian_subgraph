// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  ByteArray
} from "@graphprotocol/graph-ts";

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("profileID", Value.fromBigInt(BigInt.zero()));
    this.set("identityID", Value.fromString(""));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Profile entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileID(): BigInt {
    let value = this.get("profileID");
    return value!.toBigInt();
  }

  set profileID(value: BigInt) {
    this.set("profileID", Value.fromBigInt(value));
  }

  get identityID(): string {
    let value = this.get("identityID");
    return value!.toString();
  }

  set identityID(value: string) {
    this.set("identityID", Value.fromString(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }
  
  // get addresses(): Bytes[] {
  //   let value = this.get("addresses");
  //   return value!.toBytesArray();
  // }

  // set addresses(value: Bytes[]) {
  //   this.set("addresses", Value.fromBytesArray(value));
  // }

  // get externalAddresses(): string[] {
  //   let value = this.get("externalAddresses");
  //   return value!.toStringArray();
  // }

  // set externalAddresses(value: string[]) {
  //   this.set("externalAddresses", Value.fromStringArray(value));
  // }

}

export class Address extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty())); 
    this.set("profile", Value.fromString(""));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Address entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Address entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Address", id.toString(), this);
    }
  }

  static load(id: string): Address | null {
    return changetype<Address | null>(store.get("Address", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get profile(): string {
    let value = this.get("profile");
    return value!.toString();
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }

}

export class ExternalAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("externalAddress", Value.fromString(""));
    this.set("networkID", Value.fromBigInt(BigInt.zero()));
    this.set("profile", Value.fromString(""));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExternalAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExternalAddress entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExternalAddress", id.toString(), this);
    }
  }

  static load(id: string): ExternalAddress | null {
    return changetype<ExternalAddress | null>(store.get("ExternalAddress", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get externalAddress(): string {
    let value = this.get("externalAddress");
    return value!.toString();
  }

  set externalAddress(value: string) {
    this.set("externalAddress", Value.fromString(value));
  }

  get networkID(): BigInt {
    let value = this.get("networkID");
    return value!.toBigInt();
  }

  set networkID(value: BigInt) {
    this.set("networkID", Value.fromBigInt(value));
  }

  get profile(): string {
    let value = this.get("profile");
    return value!.toString();
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }

}


export class Tag extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tag", Value.fromString(""));
    this.set("cid", Value.fromString(""));
    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tag entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tag entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tag", id.toString(), this);
    }
  }

  static load(id: string): Tag | null {
    return changetype<Tag | null>(store.get("Tag", id));
  }

  static delete(id: string): void {
    store.remove("Tag", id);
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tag(): string {
    let value = this.get("tag");
    return value!.toString();
  }

  set tag(value: string) {
    this.set("tag", Value.fromString(value));
  }

  get cid(): string {
    let value = this.get("cid");
    return value!.toString();
  }

  set cid(value: string) {
    this.set("cid", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }

}

export class ExternalNetwork extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
    this.set("networkType", Value.fromString(""));
    this.set("networkID", Value.fromBigInt(BigInt.zero()));
    this.set("enabled", Value.fromBoolean(true));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));

  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExternalNetwork entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExternalNetwork entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExternalNetwork", id.toString(), this);
    }
  }

  static load(id: string): ExternalNetwork | null {
    return changetype<ExternalNetwork | null>(store.get("ExternalNetwork", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get networkType(): string {
    let value = this.get("networkType");
    return value!.toString();
  }

  set networkType(value: string) {
    this.set("networkType", Value.fromString(value));
  }

  get networkID(): BigInt {
    let value = this.get("networkID");
    return value!.toBigInt();
  }

  set networkID(value: BigInt) {
    this.set("networkID", Value.fromBigInt(value));
  }

  get enabled(): bool {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: bool) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }

}


export class ExternalProfile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
    this.set("profileID", Value.fromBigInt(BigInt.zero()));
    this.set("networkID", Value.fromBigInt(BigInt.zero()));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));

  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExternalProfile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExternalProfile entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExternalProfile", id.toString(), this);
    }
  }

  static load(id: string): ExternalProfile | null {
    return changetype<ExternalProfile | null>(store.get("ExternalProfile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileID(): BigInt {
    let value = this.get("profileID");
    return value!.toBigInt();
  }

  set profileID(value: BigInt) {
    this.set("profileID", Value.fromBigInt(value));
  }

  get networkID(): BigInt {
    let value = this.get("networkID");
    return value!.toBigInt();
  }

  set networkID(value: BigInt) {
    this.set("networkID", Value.fromBigInt(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }

}